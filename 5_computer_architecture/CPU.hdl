// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // a register
    Mux16(a=instruction, b=aluresult, sel=instruction[15], out=ainst);
    Not(in=instruction[15], out=tmpaload);
    Or(a=tmpaload, b=instruction[5], out=aload); // check i and d1 of instruction
    ARegister(in=ainst, load=aload, out=aregist);

    // A/M
    Mux16(a=aregist, b=inM, sel=instruction[12], out=am); // check a of instruction

    // D
    And(a=instruction[15], b=instruction[4], out=dload); // check i and d2 of instruction
    DRegister(in=aluresult, load=dload, out=dregist);

    // ALU
    ALU(x=dregist, y=am, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluresult, out=outM, zr=aluzr, ng=alung);

    // check j1 (out < 0)
    And(a=instruction[15], b=instruction[2], out=cmp1sel);
    Mux(a=false, b=alung, sel=cmp1sel, out=cmp1);
    // check j2 (out = 0)
    And(a=instruction[15], b=instruction[1], out=cmp2sel);
    Mux(a=false, b=aluzr, sel=cmp2sel, out=cmp2);
    // check j3 (out > 0)
    Or(a=alung, b=aluzr, out=zeroorless);
    Not(in=zeroorless, out=oneormore);
    And(a=instruction[15], b=instruction[0], out=cmp3sel);
    Mux(a=false, b=oneormore, sel=cmp3sel, out=cmp3);
    // check if needs jump
    Or(a=cmp1, b=cmp2, out=needsjumptmp);
    Or(a=needsjumptmp, b=cmp3, out=needsjump);
    // PC
    Not(in=needsjump, out=inc);
    PC(in=aregist, inc=inc, load=needsjump, reset=reset, out[0..14]=pc);

    // writeM
    Mux(a=false, b=true, sel=instruction[15], out=iscload);
    And(a=iscload, b=instruction[3], out=writeM);

    // addressM
    And16(a=true, b=aregist, out[0..14]=addressM);
}