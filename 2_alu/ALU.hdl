CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:
    // zero x
    Mux16(a=false, b=true, sel=zx, out=zx16);
    Not16(in[0..15]=zx16, out=negazx);
    And16(a=x, b=negazx, out=zerox);
    // naga x
    Not16(in=zerox, out=negazerox);
    Mux16(a=false, b=true, sel=nx, out=nx16);
    Not16(in[0..15]=nx16, out=neganx);
    And16(a=zerox, b=neganx, out=w1x);
    And16(a=negazerox, b[0..15]=nx16, out=w2x);
    Or16(a=w1x, b=w2x, out=negax);

    // zero y
    Mux16(a=false, b=true, sel=zy, out=zy16);
    Not16(in[0..15]=zy16, out=negazy);
    And16(a=y, b=negazy, out=zeroy);
    // naga y
    Not16(in=zeroy, out=negazeroy);
    Mux16(a=false, b=true, sel=ny, out=ny16);
    Not16(in[0..15]=ny16, out=negany);
    And16(a=zeroy, b=negany, out=w1y);
    And16(a=negazeroy, b[0..15]=ny16, out=w2y);
    Or16(a=w1y, b=w2y, out=negay);

    // f
    And16(a=negax, b=negay, out=and);
    Add16(a=negax, b=negay, out=add);
    Mux16(a=and, b=add, sel=f, out=r);

    // no
    Not16(in=r, out=negaresult);
    Mux16(a=false, b=true, sel=no, out=no16);
    Not16(in[0..15]=no16, out=negano);
    And16(a=r, b=negano, out=w1o);
    And16(a=negaresult, b[0..15]=no16, out=w2o);
    Or16(a=w1o, b=w2o, out=result);

    // zr
    Not16(in=result, out=w1zr);
    Inc16(in=w1zr, out[15]=w2zr);
    Not(in=w2zr, out=w3zr);
    And16(a=true, b=result, out[15]=w4zr);
    Xor(a=w3zr, b=w4zr, out=zr);
    // ng
    And16(a=true, b=result, out[15]=ng);
    // out
    And16(a=result, b=true, out=out);
}