CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:
    // zero x
    Not16(in[15]=zx, in[14]=zx, in[13]=zx, in[12]=zx, in[11]=zx, in[10]=zx, in[9]=zx, in[8]=zx, in[7]=zx, in[6]=zx, in[5]=zx, in[4]=zx, in[3]=zx, in[2]=zx, in[1]=zx, in[0]=zx, out=negazx);
    And16(a=x, b=negazx, out=zerox);
    // naga x
    Not16(in=zerox, out=negazerox);
    Not16(in[15]=nx, in[14]=nx, in[13]=nx, in[12]=nx, in[11]=nx, in[10]=nx, in[9]=nx, in[8]=nx, in[7]=nx, in[6]=nx, in[5]=nx, in[4]=nx, in[3]=nx, in[2]=nx, in[1]=nx, in[0]=nx, out=neganx);
    And16(a=zerox, b=neganx, out=w1x);
    And16(a=negazerox, b[15]=nx, b[14]=nx, b[13]=nx, b[12]=nx, b[11]=nx, b[10]=nx, b[9]=nx, b[8]=nx, b[7]=nx, b[6]=nx, b[5]=nx, b[4]=nx, b[3]=nx, b[2]=nx, b[1]=nx, b[0]=nx, out=w2x);
    Or16(a=w1x, b=w2x, out=negax);

    // zero y
    Not16(in[15]=zy, in[14]=zy, in[13]=zy, in[12]=zy, in[11]=zy, in[10]=zy, in[9]=zy, in[8]=zy, in[7]=zy, in[6]=zy, in[5]=zy, in[4]=zy, in[3]=zy, in[2]=zy, in[1]=zy, in[0]=zy, out=negazy);
    And16(a=y, b=negazy, out=zeroy);
    // naga y
    Not16(in=zeroy, out=negazeroy);
    Not16(in[15]=ny, in[14]=ny, in[13]=ny, in[12]=ny, in[11]=ny, in[10]=ny, in[9]=ny, in[8]=ny, in[7]=ny, in[6]=ny, in[5]=ny, in[4]=ny, in[3]=ny, in[2]=ny, in[1]=ny, in[0]=ny, out=negany);
    And16(a=zeroy, b=negany, out=w1y);
    And16(a=negazeroy, b[15]=ny, b[14]=ny, b[13]=ny, b[12]=ny, b[11]=ny, b[10]=ny, b[9]=ny, b[8]=ny, b[7]=ny, b[6]=ny, b[5]=ny, b[4]=ny, b[3]=ny, b[2]=ny, b[1]=ny, b[0]=ny, out=w2y);
    Or16(a=w1y, b=w2y, out=negay);

    // f
    And16(a=negax, b=negay, out=and);
    Add16(a=negax, b=negay, out=add);
    Mux16(a=and, b=add, sel=f, out=r);

    // no
    Not16(in=r, out=negaresult);
    Not16(in[15]=no, in[14]=no, in[13]=no, in[12]=no, in[11]=no, in[10]=no, in[9]=no, in[8]=no, in[7]=no, in[6]=no, in[5]=no, in[4]=no, in[3]=no, in[2]=no, in[1]=no, in[0]=no, out=negano);
    And16(a=r, b=negano, out=w1o);
    And16(a=negaresult, b[15]=no, b[14]=no, b[13]=no, b[12]=no, b[11]=no, b[10]=no, b[9]=no, b[8]=no, b[7]=no, b[6]=no, b[5]=no, b[4]=no, b[3]=no, b[2]=no, b[1]=no, b[0]=no, out=w2o);
    Or16(a=w1o, b=w2o, out=result);

    // zr
    Not16(in=result, out=w1zr);
    Inc16(in=w1zr, out[15]=w2zr);
    Not(in=w2zr, out=w3zr);
    And16(a=true, b=result, out[15]=w4zr);
    Xor(a=w3zr, b=w4zr, out=zr);
    // ng
    And16(a=true, b=result, out[15]=ng);
    // out
    And16(a=result, b=true, out=out);
}